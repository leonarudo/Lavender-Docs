{
  "api/lavender.html": {
    "href": "api/lavender.html",
    "title": "Lavender | Lavender Docs",
    "summary": "Lavender"
  },
  "docs/CommandLib/CommandManager.html": {
    "href": "docs/CommandLib/CommandManager.html",
    "title": "CommandManager Static Class | Lavender Docs",
    "summary": "CommandManager Static Class Definition Namespace: Lavender.CommandLib Source: CommandManager.cs Remarks The CommandManager gives you the ability to add custom commands to the developer console using IConsoleCommand as command handler. Methods RegisterCommand(IConsoleCommand) Register an IConsoleCommand with the handler PrintToDevConsole(object) Prints a message to the dev console"
  },
  "docs/CommandLib/IConsoleCommand.html": {
    "href": "docs/CommandLib/IConsoleCommand.html",
    "title": "IConsoleCommand Interface | Lavender Docs",
    "summary": "IConsoleCommand Interface Definition Namespace: Lavender.CommandLib Source: IConsoleCommand.cs Examples Creating a custom command: using Lavender.CommandLib; public class EchoCommand : IConsoleCommand { public string Name => \"echo\"; public string Description => \"echoes whatever you tell it to\"; public string Usage => \"echo <string>\"; public void Execute(params string[] args) { if (args.Length < 2) { CommandManager.PrintToDevConsole(Usage); return; } //Specifically call string.Trim(char[]) instead of //string.Trim(char) to avoid a netstandard 2.0 -> 2.1 //issue CommandManager.PrintToDevConsole(args[1].Trim(['\"'])); } } Register the command: CommandManager.RegisterCommand(new EchoCommand()); Put this in ur plugin innit code; e.g., In your BaseUnityPlugin class in Awake() Properties Name The name of the console command, (e.g., \"give\"). Description The description of the console command (e.g., \"Gives the player an item\"). Usage A short explanation on how to use the console command (e.g., \"give [item_name]\"). Methods Execute(params string[]) A function to be executed when the console command is run."
  },
  "docs/FurnitureLib/FurnitureAssetData.html": {
    "href": "docs/FurnitureLib/FurnitureAssetData.html",
    "title": "FurnitureAssetData Class | Lavender Docs",
    "summary": "FurnitureAssetData Class Definition Namespace: Lavender.FurnitureLib Source: FurnitureAssetData.cs Examples FurnitureAssetData.json { \"imagePath\": \"png-or-jpg-path\", \"objPath\": \"obj-path\", \"texturePaths\": [ \"png-or-jpg-texture-path\", \"more-texture-paths-if-needed\" ] } Properties imagePath Furniture Image PNG/JPG filepath relative to the json file objPath OBJ filepath relative to the json file texturePaths PNG/JPG filepath(s) relative to the json file"
  },
  "docs/FurnitureLib/FurnitureConfig.html": {
    "href": "docs/FurnitureLib/FurnitureConfig.html",
    "title": "FurnitureConfig Class | Lavender Docs",
    "summary": "FurnitureConfig Class Definition Namespace: Lavender.FurnitureLib Source: FurnitureConfig.cs Example Warning Lavender supports loading images and obj's at runtime, but the obj importer is currently pretty buggy. For the best and more stable results use AssetBundle imports instead! Note If you are using an FurnitureAssetData.json instead of an AssetBundle, set the values for imageName, prefabName and previewPrefabName to \"\"! FurnitureConfig.json { \"id\": 0, \"title\": \"Name\", \"details\":\"Description\", \"priceOC\": 0, \"priceRM\": 0, \"assetBundlePath\": \"assetBundle\", \"imageName\":\"asset_img\", \"prefabName\":\"asset_pre\", \"previewPrefabName\":\"asset_prepre\", \"category\": \"ALL\", \"restrictedAreas\": [ ], \"displayStyle\": \"Default\", \"placeType\": \"all\", \"displayRotationY\": 0 } Properties id Furniture ID title The name of the furniture details A short description of the furniture priceOC OC price priceRM RM price assetBundlePath The location of the AssetBundle, which contains the image,prefab and preview prefab, relative to the .json path Or the location of the FurnitureAssetData .json imageName The name of the sprite in the AssetBundle defined at assetBundlePath prefabName The name of the GameObject/Prefab in the AssetBundle defined at assetBundlePath previewPrefabName The name of the GameObject/Prefab in the AssetBundle defined at assetBundlePath category The category of the Furniture restrictedAreas Restricted areas to build the furniture -> Allowed to put everywhere if empty displayStyle Should it be positioned like a normal furniture or like a painting or ceiling object? placeType Restricted places to build (wall, floor, etc) displayRotationY Display rotation on the Y-Aches Furniture Config Enums FurnitureCategory All Chairs Tables Electronics Paintings Lights Rugs Items Machines Storage Clutter Beds Sofas Decoration Plants Shelves Manufacturing Growing Letters Bathroom Signs Magazines Posters Curtains Flags LicensePlates Kitchen Tank FurnitureDisplayStyle Default Painting Ceiling FurnitureBuildingArea None Stairs PlayerApartment Workshop Outside Greenhouse FurniturePlaceType all floor wall ceiling floorAndWall"
  },
  "docs/FurnitureLib/FurnitureCreator.html": {
    "href": "docs/FurnitureLib/FurnitureCreator.html",
    "title": "FurnitureCreator \"Static\" Class | Lavender Docs",
    "summary": "FurnitureCreator \"Static\" Class Definition Namespace: Lavender.FurnitureLib Source: FurnitureCreator.cs Remarks The FurnitureCreator allows you to create furniture's either from an FurnitureConfig json or directly by setting the right parameters in FurnitureCreator.NewFurniture(...) (if you know what your doing xD) If you just want to create some furniture's stick to Create(...) and CreateShopFurniture(...). Methods NewFurniture(string, string, Sprite, string, Furniture.Category, int, int, GameObject, GameObject, Furniture.BuildingArea[], List , FurniturePlaceType, Furniture.DisplayStyle, int) Creates an Furniture object and setups the prefab entity structure. *This function is for those who know what there doing!* FurnitureConfigToFurniture(FurnitureConfig) Uses a FurnitureConfig to create a Furniture Create(string) Creates a Furniture from the given path to the FurnitureConfig json and adds it to the 'createdFurniture' list CreateShopFurniture(string, int) Creates an BuildingSystem.FurnitureInfo for the FurnitureShopRestockHandler CreateShopFurniture(int, string) Creates an BuildingSystem.FurnitureInfo for the FurnitureShopRestockHandler"
  },
  "docs/FurnitureLib/HandlerAttributes.html": {
    "href": "docs/FurnitureLib/HandlerAttributes.html",
    "title": "HandlerAttributes (FurnitureLib) | Lavender Docs",
    "summary": "HandlerAttributes (FurnitureLib) Namespace: Lavender.FurnitureLib Source: HandlerAttributes.cs FurnitureHandlerAttribute The Furniture Handler Attribute allows you to add custom scripts to your furniture prefab! The Handler will always be called every time your furniture gets loaded in SavableScriptableObject.LoadFromPath(). Scripts added to your prefabs directly in the furniture creation or AssetBundle are likely causing errors, so always add your scripts using this handler! Example using Lavender.FurnitureLib; // This Handler function gets called every time your furniture gets loaded! [FurnitureHandler(\"YourFurnitureTitle\")] public static Furniture YourFurnitureHandler(Furniture furniture) { // ... -> do something with the fresh loaded furniture like furniture.prefab.AddComponent<T>() return furniture; } In order to make the FurnitureHandler work, you need to register it: using Lavender; // Put this in your mod Awake() function Lavender.AddFurnitureHandlers(typeof(the_class_containing_the_FurnitureHandler)); Lavender.AddFurnitureShopRestockHandlers(typeof(the_class_containing_the_FurnitureShopRestockHandler)); Constructors FurnitureHandler(string) Initializes a new instance of the FurnitureHandlerAttribute class Properties FurnitureTitle The furniture title defines the lavender furniture the handler is applied to! FurnitureShopRestockHandlerAttribute The Furniture Shop Restock Handler Attribute allows you to add your furniture every time a restock event occurs! Example using Lavender.FurnitureLib; [FurnitureShopRestockHandlerAttribute(\"AnyID\")] public static List<BuildingSystem.FurnitureInfo> FurShopRestockHandler(FurnitureShopName name) { List<BuildingSystem.FurnitureInfo> restock = new List<BuildingSystem.FurnitureInfo>(); string path = \"FurnitureConfig.json\"; // Idea: Randomize the restock amount to make it more realistic int amount = 20; BuildingSystem.FurnitureInfo? info = FurnitureCreator.CreateShopFurniture(path, amount); if(info != null) restock.Add(info); return restock; } In order to make the FurnitureShopRestockHandler work, you need to register it: using Lavender; // Put this in your mod Awake() function Lavender.AddFurnitureShopRestockHandlers(typeof(the_class_containing_the_FurnitureShopRestockHandler)); Constructors FurnitureShopRestockHandler(string) Initializes a new instance of the FurnitureShopRestockHandlerAttribute class. Properties HandlerUID A Unique ID needed incase you want to remove an handler after registering it. FurnitureShopName Enum The FurnitureShopName Enum which is one of the parameters of the FurnitureShopRestockHandler function allows you to identify which furniture shop the restock event came from. Values Warning Values from the Furniture Shops which came with the Mines Update are currently (v2.1) missing and displayed as NONE! None If none of the other values fit, the enum will be set to ``FurnitureShopName.None`` OneStopShop One Stop Shop MoebelmannFurnitures MÃ¶belmann Furnitures SamuelJonasson Jonasson's Shop"
  },
  "docs/Item-n-Recipe/Items.html": {
    "href": "docs/Item-n-Recipe/Items.html",
    "title": "Items | Lavender Docs",
    "summary": "Items Note Item and Recipes are identified via integer values. This, unfortunately, means that conflicts between mods are possible if we (as a community) do not communicate and document which mod(ders) use which ID regions. See current ID Allocations here Item.json Lavender allows you to add new Items to Obenseuer without editing the native Items.json file! Since Lavenders Item.json format is exactly the same as Obenseuers one (it even uses Obenseuers Code to read it) you can simply learn from Obenseuers Item.json file how to add Items! Example [ { \"ID\": 101, \"Title\": \"Item Name\", \"Categories\": [ \"CategoryName\" ], \"Value\": 1, \"Description\": \"Modded Item using AssetBundles\", \"Stackable\": 99, \"Appearance\": { \"Material\": \"\", \"SpritePath\": \"AssetBundleFileName#AB<AssetBundle-ImageName>\", \"ColorValue\": \"\", \"PrefabPath\": \"AssetBundleFileName#AB<AssetBundle-PrefabName>\", \"PrefabPathMany\": \"\" }, \"Actions\": [], \"Attachments\": { \"Name\": \"\", \"Attachment1\": \"none\", \"Attachment2\": \"none\" }, \"Meta\": [] }, { \"ID\": 102, \"Title\": \"Item Name 2\", \"Categories\": [ \"CategoryName\", \"AnotherCategory\" ], \"Value\": 1, \"Description\": \"Modded Item using Runtime Imports\", \"Stackable\": 99, \"Appearance\": { \"Material\": \"\", \"SpritePath\": \"item-img.png\", \"ColorValue\": \"\", \"PrefabPath\": \"item-object.obj\", \"PrefabPathMany\": \"\" }, \"Actions\": [], \"Attachments\": { \"Name\": \"\", \"Attachment1\": \"none\", \"Attachment2\": \"none\" }, \"Meta\": [] } ] In order to add Items through your own Item.json you need to register it to Lavender. string itemsPath = \"Items.json\"; Lavender.AddCustomItemsFromJson(itemsPath, LCMPluginInfo.PLUGIN_NAME); Keys Note When explained as '???' then I'm either unsure what it is or how to explain it. Take a look at Obenseuer's Item.json for more infos on those Keys. ID Unique ID for the Item, which is used in the Item Database to find an Item by its ID. Title The name of your Item. Categories An List of Item Categories. e.g. 'Food' or 'YourModName' Value The value of this item in OC. Description Description of your Object. Stackable The max stack size of this item. e.g. 64 :) Appearance Material ??? SpritePath The path to place where the Item UI Image is stored. InGame Addressable, AssetBundle or local file path. ColorValue ??? PrefabPath The path to place where the Item Prefab (InGame Object when dropped) is stored. InGame Addressable, AssetBundle or local file path. PrefabPathMany Similar to PrefabPath, but this is the object shown, when you drop an stacked Item. Actions ??? Attachments ??? Meta ??? Appearance Warning Lavender supports loading images and obj's at runtime, but the obj importer is currently pretty buggy. For the best and more stable results use AssetBundle imports instead! Lavender allows you to use three ways to define the Items appearance: 1. AssetBundles AssetBundles are the recommended way to define the Item appearance. In order to import an asset (Image/3D-Model/etc.) simply add the following value to an key: \"key\": \"AssetBundlePath#AB<Bundle-Object>\" Replace AssetBundlePath with the path to your AssetBundle file relative to your Mod.dll path. Replace Bundle-Object with the bundle path to your object. So if your AssetBundle file has the name McMushroom and is in or will be placed in the same directory of your Mod.dll and in the root directory of your AssetBundle there is the Image ShroomBurgerIMG the key-value-pair would look like this: \"key\": \"McMushroom#AB<ShroomBurgerIMG>\" 2. Runtime Imports For runtime imports simply enter the relative file path to your Asset as an value. For Example, if you have an PNG Image named McMushroom.png in the same directory as your Mod.dll enter: \"key\": \"McMushroom.png\" 3. Addressables Last but not least you can still point to Obenseuer's Addressables just like the game does it in its Item.json."
  },
  "docs/Item-n-Recipe/Recipes.html": {
    "href": "docs/Item-n-Recipe/Recipes.html",
    "title": "Recipes | Lavender Docs",
    "summary": "Recipes Note Item and Recipes are identified via integer values. This, unfortunately, means that conflicts between mods are possible if we (as a community) do not communicate and document which mod(ders) use which ID regions. See current ID Allocations here Recipes.json Example recipes.json from norbby42 (Quackers) Smuggler's Pack Mod [ { \"ID\": 400001, \"Name\": \"Smuggler's Pack Insert\", \"Type\": \"Sewing\", \"useOnlyStolenItems\": false, \"allowedNonStolenItemsIds\": [], \"keepItemOwnerOnFail\": false, \"disableJunkSpawn\": false, \"Appearance\": { \"SpritePath\": \"\", \"CraftShowModel\": true, \"itemToShow\": { \"ID\": 400001, \"name\": \"Smuggler's Pack Insert'\", \"itemnamespace\": null } }, \"RecipeRequired\": false, \"RequiredConditions\": [], \"ExcludingConditions\": [], \"RecipeTags\": [ \"Open Sewer Magazine\" ], \"variantItemCategory\": \"None\", \"variantItemAmount\": 0, \"input\": [ { \"Key\": { \"ID\": 14930, \"Title\": \"Empty Backpack\", \"itemnamespace\": null }, \"Value\": 1.0 }, { \"Key\": { \"name\": \"Cloth Roll\", \"itemnamespace\": null, \"ID\": 12700 }, \"Value\": 1.0 }, { \"Key\": { \"name\": \"Thread\", \"itemnamespace\": null, \"ID\": 15750 }, \"Value\": 4.0 }, { \"Key\": { \"name\": \"Scrap Metal\", \"itemnamespace\": null, \"ID\": 35180 }, \"Value\": 2.0 } ], \"output\": [ { \"Key\": { \"name\": \"Smuggler's Pack Insert\", \"itemnamespace\": null, \"ID\": 400001 }, \"Value\": 1.0 }, { \"Key\": { \"name\": \"Cloth Scraps\", \"itemnamespace\": null, \"ID\": 12680 }, \"Value\": 1.0 } ], \"outputFail\": [ { \"Key\": { \"name\": \"Cloth Scraps\", \"itemnamespace\": null, \"ID\": 12680 }, \"Value\": 2.0 }, { \"Key\": { \"name\": \"Scrap Metal\", \"itemnamespace\": null, \"ID\": 35180 }, \"Value\": 1.0 } ], \"metaSettings\": { \"setIntegrity\": 1.0, \"setIntegrityFail\": 0.5, \"useAmmoAsInput\": true, \"setAmmoOfMax\": 1.0, \"setAmmoOfMaxFail\": 0.0, \"useLiquidContainers\": false, \"returnLiquidContainers\": true, \"putLiquidsIntoContainer\": { \"name\": \"\", \"itemnamespace\": null, \"ID\": 0 }, \"qualityFactor\": 1.0, \"qualityFactorFail\": 0.5, \"useFixedQuality\": false, \"fixedQuality\": 1.0, \"mailName\": \"\", \"mailReceiver\": { \"name\": \"\", \"ID\": -1 } }, \"FailChance\": 0.85, \"RelevantSkill\": \"Sewing\", \"SkillFactor\": 1.0, \"ProcessTime\": 500, \"Meta\": null } ] In order to add Recipes through your own Recipes.json you need to register it to Lavender. string recipesPath = \"Recipes.json\"; Lavender.AddCustomRecipesFromJson(recipesPath, LCMPluginInfo.PLUGIN_NAME); Keys I won't explain any keys here for now, because I didn't work that much with Recipes yet. Please refer to Obenseurs Recipes.json. Appearance SpritePath The path to place where the Item UI Image is stored. InGame Addressable, AssetBundle or local file path. For the SpritePath Asset Import Options, see Appearance."
  },
  "docs/RuntimeImporter/FastObjImporter.html": {
    "href": "docs/RuntimeImporter/FastObjImporter.html",
    "title": "FastObjImporter Class | Lavender Docs",
    "summary": "FastObjImporter Class Definition Namespace: Lavender.RuntimeImporter Source: FastObjImporter.cs Import .obj files at runtime. Example Mesh mesh = FastObjImporter.Instance.ImportFile(\"McMushroom.obj\"); Static Properties Instance The current FastObjImporter instance. Methods ImportFile(string) Imports the given OBJ and returns an UnityEngine.Mesh Object."
  },
  "docs/RuntimeImporter/ImageLoader.html": {
    "href": "docs/RuntimeImporter/ImageLoader.html",
    "title": "ImageLoader Static Class | Lavender Docs",
    "summary": "ImageLoader Static Class Definition Namespace: Lavender.RuntimeImporter Source: ImageLoader.cs Import .png or .jpeg at runtime. Methods LoadImage(string) Imports an PNG/JPEG and returns a Texture2D object. LoadSprite(string) Imports an PNG/JPEG and returns a calibrated Sprite object."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Lavender Docs",
    "summary": "Getting Started"
  },
  "docs/lavender.html": {
    "href": "docs/lavender.html",
    "title": "Lavender Class | Lavender Docs",
    "summary": "Lavender Class Definition Namespace: Lavender Source: Lavender.cs Lavenders \"Main\" Class, you will use it pretty often. Properties isInitialized harmony lastLoadedScene The build index of the last scene during the \"SceneManager.sceneLoaded\" callback LoadingDone You want to execute your mod logic only when LoadingDone = true to make sure that all game logic is already initialized! Static Properties instance Provides the current Lavender instance createdFurniture A list of all modded furniture's using Lavender. customItemDatabase A list of all modded items using Lavender. customRecipeDatabase A list of all modded Recipes using Lavender. Methods GetFurnitureByTitel(string) AddFurnitureHandlers(Type) Gets all FurnitureHandler methods defined in the given Type: type and registers them for the Handler callback AddFurnitureShopRestockHandlers(Type) Gets all FurnitureShopRestockHandler methods defined in the given Type: type and registers them for the Handler callback AddCustomItem(Item, string) AddCustomItemsFromJson(string, string) AddCustomRecipe(Recipe, string) AddCustomRecipesFromJson(string, string)"
  },
  "index.html": {
    "href": "index.html",
    "title": "| Lavender Docs",
    "summary": "Lavender is a powerful and user-friendly library mod designed to simplify the process of modding the game Obenseuer using BepInEx as mod loader. Contributing Contributions are welcome! Whether you're fixing bugs, adding new features, or improving documentation, your help is appreciated. To contribute, please fork the repository and submit a pull request. For major changes, please open an issue first to discuss what you would like to change. Here are some basic resources on code style and naming conventions Lavender try's to fulfill: Coding Conventions Identifier Names Repositories: Lavender - The library code! Lavender Docs - Documentation Repo & this GitHub Page License This project is licensed under the LGPL-v2.1 license"
  },
  "template/class.html": {
    "href": "template/class.html",
    "title": "TYPE Class | Lavender Docs",
    "summary": "TYPE Class Definition Namespace: Source: Type.cs Remarks Constructors func(object, string) Description Properties Property Description Static Properties Property Description Methods func(object, string) Description"
  }
}